name: HTNodes

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:

permissions:
  contents: write   # ✅ Needed for release upload/delete

jobs:
  HTNodes:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours max

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set hostname to HTNodes
        run: sudo hostnamectl set-hostname HTNodes

      # 1. Download backup parts from release
      - name: Download latest backup from release
        run: |
          echo "📥 Downloading backup parts from latest-backup release..."
          gh release download latest-backup --repo ${{ github.repository }} --pattern "backup.part-*" || echo "⚠ No backup found"
          
          if ls backup.part-* 1> /dev/null 2>&1; then
            echo "✅ Reassembling backup..."
            cat backup.part-* > backup.tar.gz
            rm -f backup.part-*
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 2. Restore /home/HTNodes, /var/www/pterodactyl, /etc/pterodactyl
      - name: Restore backup files
        run: |
          if [ -f backup.tar.gz ]; then
            echo "✅ Restoring backup..."
            sudo tar -xzf backup.tar.gz -C /
            echo "✅ Restore complete"
          else
            echo "⚠ No backup found, starting fresh"
          fi

      # 3. Run VPS session (same as before)
      - name: Install prerequisites
        run: |
          sudo apt update
          sudo apt install -y curl unzip sudo net-tools neofetch pv pigz

      - name: Install Tailscale
        run: curl -fsSL https://tailscale.com/install.sh | sh

      - name: Start Tailscale
        run: |
          sudo tailscaled &
          sleep 8
          sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname=HTVPS || echo "Tailscale already up"

      - name: Create user HTNodes with sudo
        run: |
          if ! id -u HTNodes >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash HTNodes
            echo "HTNodes:HTNodes" | sudo chpasswd
            sudo usermod -aG sudo HTNodes
            echo "HTNodes ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/HTNodes
          fi

      - name: Start SSHX + Tmate session and keep alive
        run: |
          set -x
          TS_IP=$(tailscale ip -4 2>/dev/null | head -n 1)
          if [ -n "$TS_IP" ]; then
            echo "🔑 Tailscale IP: $TS_IP"
            echo "👉 ssh HTNodes@$TS_IP"
            echo "Password: HTNodes"
          fi

          echo "✅ Starting SSHX..."
          curl -sSf https://sshx.io/get | sh -s run &
          SSHX_PID=$!

          echo "✅ Starting Tmate..."
          sudo apt-get install -y tmate
          tmate -F new-session -d
          TMATE_SOCK=$(tmate -S /tmp/tmate.sock new-session -d 2>/dev/null || echo "/tmp/tmate.sock")
          tmate -S $TMATE_SOCK wait tmate-ready
          echo "👉 Tmate SSH: $(tmate -S $TMATE_SOCK display -p '#{tmate_ssh}')"
          echo "👉 Tmate Web: $(tmate -S $TMATE_SOCK display -p '#{tmate_web}')"

          echo "✅ SSHX + Tmate started. Keeping alive for 5h 40m..."
          SECONDS_LEFT=$((340 * 60))
          while [ $SECONDS_LEFT -gt 0 ]; do
            if ps -p $SSHX_PID > /dev/null; then
              echo "SSHX alive | Time left: $((SECONDS_LEFT / 60)) mins"
            fi
            sleep 60
            SECONDS_LEFT=$((SECONDS_LEFT - 60))
          done

          echo "⏰ Time is up! Killing SSHX if still running..."
          kill $SSHX_PID || true
          wait $SSHX_PID || true
          set +x

      # 4. On shutdown → make new backup
      - name: Backup VPS data
        run: |
          echo "✅ Backing up VPS data..."
          BACKUP_DIR="/opt/vps-backup"
          sudo mkdir -p "$BACKUP_DIR"

          TOTAL_SIZE=$(du -sb /home/HTNodes /var/www/pterodactyl /etc/pterodactyl $BACKUP_DIR 2>/dev/null | awk '{sum+=$1} END {print sum}')
          sudo tar -cf - /home/HTNodes /var/www/pterodactyl /etc/pterodactyl $BACKUP_DIR | pv -s $TOTAL_SIZE | pigz -9 > backup.tar.gz

          echo "✅ Splitting backup into 1.9GB parts..."
          split -b 1900M backup.tar.gz backup.part-
          rm -f backup.tar.gz

      # 5. Delete old assets + upload new ones
      - name: Delete old backup assets
        run: |
          ASSET_IDS=$(gh api repos/${{ github.repository }}/releases/tags/latest-backup \
            --jq '.assets[] | select(.name | startswith("backup.part-")) | .id' || true)
          for ID in $ASSET_IDS; do
            echo "🗑 Deleting old backup asset $ID..."
            gh api -X DELETE repos/${{ github.repository }}/releases/assets/$ID
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload new backup parts to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: latest-backup
          files: backup.part-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
