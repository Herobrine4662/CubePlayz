name: HTNodes

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:

permissions:
  contents: write   # ✅ Needed for release upload/delete

jobs:
  HTNodes:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours max

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set hostname to HTNodes
        run: |
          sudo hostnamectl set-hostname HTNodes
          echo "✅ Done: Hostname set"

      # 1. Download backup.tar.gz from release latest-backup
      - name: Download latest backup from release
        run: |
          echo "📥 Downloading backup from latest-backup release..."
          gh release download latest-backup --repo ${{ github.repository }} --pattern "backup.tar.gz" || echo "⚠ No backup found"
          echo "✅ Done: Backup downloaded (if exists)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 2. Restore system from backup
      - name: Restore backup files
        run: |
          if [ -f backup.tar.gz ]; then
            echo "✅ Restoring backup..."
            cd /
            sudo tar -xzf $GITHUB_WORKSPACE/backup.tar.gz
            echo "✅ Done: Files restored to /"
          else
            echo "⚠ No backup found, starting fresh"
          fi

      # 3. Run VPS session
      - name: Install prerequisites
        run: |
          sudo apt update
          sudo apt install -y curl unzip sudo net-tools neofetch pv pigz
          echo "✅ Done: Prerequisites installed"

      - name: Install Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          echo "✅ Done: Tailscale installed"

      - name: Start Tailscale
        run: |
          sudo tailscaled &
          sleep 8
          sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname=HTVPS || echo "Tailscale already up"
          echo "✅ Done: Tailscale started"

      - name: Create user HTNodes with sudo
        run: |
          if ! id -u HTNodes >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash HTNodes
            echo "HTNodes:HTNodes" | sudo chpasswd
            sudo usermod -aG sudo HTNodes
            echo "HTNodes ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/HTNodes
          fi
          echo "✅ Done: User HTNodes ensured"

      - name: Start SSHX session and keep alive
        run: |
          set -x
          TS_IP=$(tailscale ip -4 2>/dev/null | head -n 1)
          if [ -n "$TS_IP" ]; then
            echo "🔑 Tailscale IP: $TS_IP"
            echo "👉 ssh HTNodes@$TS_IP"
            echo "Password: HTNodes"
          fi

          echo "✅ Starting SSHX..."
          curl -sSf https://sshx.io/get | sh -s run &
          SSHX_PID=$!

          echo "✅ SSHX started. Keeping alive for 5h 40m..."
          SECONDS_LEFT=$((340 * 60))
          while [ $SECONDS_LEFT -gt 0 ]; do
            if ps -p $SSHX_PID > /dev/null; then
              echo "SSHX alive | Time left: $((SECONDS_LEFT / 60)) mins"
            fi
            sleep 60
            SECONDS_LEFT=$((SECONDS_LEFT - 60))
          done

          echo "⏰ Time is up! Killing SSHX if still running..."
          kill $SSHX_PID || true
          wait $SSHX_PID || true
          set +x
          echo "✅ Done: SSHX session ended"

      # 4. On shutdown → make new backup
      - name: Backup VPS data
        run: |
          echo "✅ Backing up VPS data..."
          BACKUP_DIR="/opt/vps-backup"
          sudo mkdir -p "$BACKUP_DIR/data"

          if [ -f /var/lib/tailscale/tailscaled.state ]; then
            sudo cp /var/lib/tailscale/tailscaled.state "$BACKUP_DIR/data/"
          fi

          # Directories to include
          INCLUDE_DIRS="
          /home/HTNodes
          /var/www/pterodactyl
          /etc/pterodactyl
          /etc
          /usr/bin
          /usr/sbin
          /usr/lib
          /lib
          /lib64
          /var/lib
          "

          # Exclude unnecessary dirs
          EXCLUDES="
          --exclude=/var/cache/*
          --exclude=/var/log/*
          --exclude=/tmp/*
          --exclude=/var/tmp/*
          "

          TOTAL_SIZE=$(sudo du -sb $INCLUDE_DIRS 2>/dev/null | awk '{sum+=$1} END {print sum}')

          cd /
          sudo tar -cf - $EXCLUDES $INCLUDE_DIRS $BACKUP_DIR | pv -s $TOTAL_SIZE | pigz -9 > $GITHUB_WORKSPACE/backup.tar.gz
          echo "✅ Done: backup.tar.gz created"

      # 5. Delete old asset + upload new one
      - name: Delete old backup asset
        run: |
          ASSET_ID=$(gh api repos/${{ github.repository }}/releases/tags/latest-backup \
            --jq '.assets[] | select(.name=="backup.tar.gz") | .id' || true)
          if [ -n "$ASSET_ID" ]; then
            echo "🗑 Deleting old backup asset..."
            gh api -X DELETE repos/${{ github.repository }}/releases/assets/$ASSET_ID
          else
            echo "⚠ No old asset found"
          fi
          echo "✅ Done: Old asset deletion step finished"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload new backup to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: latest-backup
          files: backup.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
